install.packages("stringi")
% R bootcamp, Module 0: Recruit processing
% August 2018, UC Berkeley
% Chris Paciorek
if(!('modules' %in% unlist(strsplit(getwd(), split = '/')))) setwd('modules')
air <- read.csv(file.path('..', 'data', 'airline.csv'), stringsAsFactors = FALSE)
install.packages("stringi")
head(air)
dim(air)
nrow(air)
names(air)
class(air)
is.matrix(air)
class(air$DepDelay)
class(air$UniqueCarrier)
class(air$Diverted)
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(dplyr)
library(tidyr)
gapminder <- read.csv("../data/gapminder-FiveYearData.csv",
stringsAsFactors = TRUE)
head(gapminder)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tidyr")
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(dplyr)
library(tidyr)
library(ggplot2)
if(!('modules' %in% unlist(strsplit(getwd(), split = '/')))) setwd('modules')
gapminder <- read.csv("../data/gapminder-FiveYearData.csv",
stringsAsFactors = TRUE)
head(gapminder)
mean(gapminder[gapminder$continent == "Africa", "gdpPercap"])
mean(gapminder[gapminder$continent == "Americas", "gdpPercap"])
mean(gapminder[gapminder$continent == "Asia", "gdpPercap"])
# NOT run
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(dplyr)
# NOT run
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
year_country_gdp_dplyr <- select(gapminder, year, country, gdpPercap)
head(year_country_gdp_dplyr)
year_country_gdp_base <- gapminder[,c("year", "country", "gdpPercap")]
# checking equivalence: TRUE indicates an exact match between these objects
all.equal(year_country_gdp_dplyr, year_country_gdp_base)
year_country_gdp <- gapminder %>% select(year, country, gdpPercap)
year_country_gdp_africa <- gapminder %>%
filter(continent == "Africa") %>%
select(year,country,gdpPercap)
gdp_bycontinents <- gapminder %>%
group_by(continent) %>%
summarize(mean_gdpPercap = mean(gdpPercap))
head(gdp_bycontinents)
gdp_bycontinents_byyear <- gapminder %>%
group_by(continent, year) %>%
summarize(mean_gdpPercap = mean(gdpPercap))
head(gdp_bycontinents_byyear)
gdp_pop_bycontinents_byyear <- gapminder %>%
group_by(continent, year) %>%
summarize(mean_gdpPercap = mean(gdpPercap),
sd_gdpPercap = sd(gdpPercap),
mean_pop = mean(pop),
sd_pop = sd(pop))
head(gdp_pop_bycontinents_byyear)
gapminder_with_extra_vars <- gapminder %>%
group_by(continent, year) %>%
mutate(mean_gdpPercap = mean(gdpPercap),
sd_gdpPercap = sd(gdpPercap),
mean_pop = mean(pop),
sd_pop = sd(pop))
head(gapminder_with_extra_vars)
(mean_gdpPercap = mean(gdpPercap),
gdp_pop_bycontinents_byyear <- gapminder %>%
mutate(gdp_billion = gdpPercap*pop/10^9) %>%
group_by(continent, year) %>%
summarize(mean_gdpPercap = mean(gdpPercap),
sd_gdpPercap = sd(gdpPercap),
mean_pop = mean(pop),
sd_pop = sd(pop),
mean_gdp_billion = mean(gdp_billion),
sd_gdp_billion = sd(gdp_billion))
head(gdp_pop_bycontinents_byyear)
# arrange by country, continent, and year
gap_medium <- gap_medium %>%
arrange(country,continent,year)
gapminder_with_extra_vars <- gapminder %>%
group_by(continent, year) %>%
mutate(mean_gdpPercap = mean(gdpPercap),
sd_gdpPercap = sd(gdpPercap),
mean_pop = mean(pop),
sd_pop = sd(pop)) %>%
arrange(desc(year), continent)
head(gapminder_with_extra_vars)
wide <- data.frame(
name = c("Wilbur", "Petunia", "Gregory"),
time1 = c(67, 80, 64),
time2 = c(56, 90, 50),
time3 = c(70, 67, 101)
)
wide
long <- data.frame(
name = c("Wilbur", "Petunia", "Gregory", "Wilbur", "Petunia", "Gregory", "Wilbur", "Petunia", "Gregory"),
time = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
heartrate = c(67, 80, 64, 56, 90, 50, 70, 67, 10)
)
long
wide <- data.frame(
name = c("Wilbur", "Petunia", "Gregory"),
time1 = c(67, 80, 64),
time2 = c(56, 90, 50),
time3 = c(70, 67, 101)
)
wide
long <- data.frame(
name = c("Wilbur", "Petunia", "Gregory", "Wilbur", "Petunia", "Gregory", "Wilbur", "Petunia", "Gregory"),
time = c(1, 1, 1, 2, 2, 2, 3, 3, 3),
heartrate = c(67, 80, 64, 56, 90, 50, 70, 67, 10)
)
long
gap_wide <- read.csv("../data/gapminder_wide.csv", stringsAsFactors = FALSE)
View(gap_wide)
gap_long <- gap_wide %>%
gather(obstype_year, obs_values, 3:38)
# Load the "tidyr" package (necessary every new R session)
library(tidyr)
gap_long <- gap_wide %>%
gather(obstype_year, obs_values, 3:38)
head(gap_long)
gap_long_sep <- gap_long %>%
gap_long_sep <- gap_long %>%
separate(obstype_year, into = c('obs_type','year'), sep = "_") %>%
mutate(year = as.integer(year))
gap_long_sep <- gap_long %>%
separate(obstype_year, into = c('obs_type','year'), sep = "_") %>%
mutate(year = as.integer(year))
gap_medium <- gap_long_sep %>%
spread(obs_type, obs_values)
# Load the "tidyr" package (necessary every new R session)
library(tidyr)
gap_long <- gap_wide %>%
gather(obstype_year, obs_values, 3:38)
head(gap_long)
# with the starts_with() function
gap_long <- gap_wide %>%
gather(obstype_year, obs_values, starts_with('pop'),
starts_with('lifeExp'), starts_with('gdpPercap'))
head(gap_long)
# with the - operator
gap_long <- gap_wide %>%
gather(obstype_year, obs_values, -continent, -country)
head(gap_long)
gap_long_sep <- gap_long %>%
separate(obstype_year, into = c('obs_type','year'), sep = "_") %>%
mutate(year = as.integer(year))
gap_medium <- gap_long_sep %>%
spread(obs_type, obs_values)
head(gapminder)
life_exp_continent <- gapminder %>%
group_by(continent) %>%
summarise(median_life_exp = mean(lifeExp))
head(life_exp_continent, 5)
life_exp_continent
gapminder_with_continent_pop <- gapminder %>%
group_by(continent, year) %>%
mutate(continetPop = sum(pop))
head(gapminder_with_continent_pop)
gapminder_with_gdp_diff <- gapminder %>%
group_by(continent, year) %>%
mutate(gdpPercapDiff = gdpPercap - mean(gdpPercap)) %>%
ungroup() %>%
arrange(gdpPercapDiff)
head(gapminder_with_gdp_diff, 5)
gapminder_with_gdp_diff <- gapminder %>%
group_by(continent, year) %>%
mutate(gdpPercapDiff = gdpPercap - mean(gdpPercap)) %>%
ungroup() %>%
arrange(des(gdpPercapDiff))
gapminder_with_gdp_diff <- gapminder %>%
group_by(continent, year) %>%
mutate(gdpPercapDiff = gdpPercap - mean(gdpPercap)) %>%
ungroup() %>%
arrange(desend(gdpPercapDiff))
gapminder_with_gdp_diff <- gapminder %>%
group_by(continent, year) %>%
mutate(gdpPercapDiff = gdpPercap - mean(gdpPercap)) %>%
ungroup() %>%
arrange(descend(gdpPercapDiff))
gapminder_with_gdp_diff <- gapminder %>%
group_by(continent, year) %>%
mutate(gdpPercapDiff = gdpPercap - mean(gdpPercap)) %>%
ungroup() %>%
arrange(desc(gdpPercapDiff))
head(gapminder_with_gdp_diff, 5)
selection <- gapminder_with_gdp_diff %>%
select(country, year, gdpPercapDiff)
head(selection, 5)
glm(formula = y~x1+x2+x3+..., family = familyname(link = "linkname"),
data = )
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(fields)
library(foreign)
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(fields)
library(foreign)
glm(formula = y~x1+x2+x3+..., family = familyname(link = "linkname"),
data = )
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(fields)
library(foreign)
if(!('modules' %in% unlist(strsplit(getwd(), split = '/')))) setwd('modules')
glm(formula = y~x1+x2+x3+..., family = familyname(link = "linkname"),
data = )
gapminder <- read.csv(file.path("..", "data",
"gapminder-FiveYearData.csv"), stringsAsFactors = TRUE)
reg <- lm(formula = lifeExp ~ gdpPercap + pop + continent + year,
data = gapminder)
glm(formula = y~x1+x2+factor(x3), family = family(link = "link"),
data = )
summary(glm(formula = lifeExp ~ gdpPercap + pop +
continent:factor(year),
family = gaussian, data = gapminder))
library(mgcv)
install.packages("mgcv")
thresh <- function(x, val, upper = TRUE) {
if(upper) {
x[x > val] <- val
} else {
x[x < val] <- val
}
return(x)
}
DestSubset <- c('LAX','SEA','PHX','DEN','MSP','JFK','ATL','DFW',
'IAH', 'ORD')
airSmall <- subset(air, Dest %in% DestSubset)
# reduce outlier influence
airSmall$DepDelayCens <- thresh(airSmall$DepDelay, 180)
airSmall$SchedDepCont <- airSmall$CRSDepTime %/% 100 +
(airSmall$CRSDepTime %% 100) / 60
mod_LAX <- gam(DepDelayCens ~ s(Month, k = 8) + s(SchedDepCont, k = 25),
data = airSmall, subset = airSmall$Dest == "LAX")
library(mgcv)
mod_LAX <- gam(DepDelayCens ~ s(Month, k = 8) + s(SchedDepCont, k = 25),
data = airSmall, subset = airSmall$Dest == "LAX")
mod_ORD <- gam(DepDelayCens ~ s(Month, k = 8) + s(SchedDepCont, k = 25),
data = airSmall, subset = airSmall$Dest == "ORD")
par(mfrow = c(2,2))
plot(mod_LAX)
plot(mod_ORD)
par(mfrow = c(2,2))
plot(mod_LAX)
plot(mod_ORD)
pnorm(1.96)
qnorm(.975)
dbinom(0:10, size = 10, prob = 0.3)
rmultinom(1, 100, prob = c(.1, .1, .2, .3, .25, .05))
x <- seq(0, 10, length = 100)
plot(x, dchisq(x, df = 1), type = 'l')
lines(x, dchisq(x, df = 2), col = 'red')
lines(x, dchisq(x, df = 2), col = 'red')
plot(x, dchisq(x, df = 1), type = 'l')
banana <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
x1s <- x2s <- seq(-5, 5, length = 100)
x <- expand.grid(x1s, x2s)
fx <- apply(x, 1, banana)
par(mfrow = c(1, 2), mai = c(.45, .4, .1, .4))
image.plot(x1s, x2s, matrix(fx, 100), xlab = '', ylab = '')
image.plot(x1s, x2s, matrix(fx, 100), xlab = '', ylab = '')
library(fields)
library(fields)
optim(c(-2,0), banana)
sample_pos <- rpois(100, lambda=5)
diff <- mean(sample_pos)-5
diff
# include any code here you don't want to show up in the document,
# e.g. package and dataset loading
library(dplyr)
library(tidyr)
library(ggplot2)
library(lattice)
library(gridExtra)
library(reshape2)
install.packages("gridExtra")
install.packages("reshape")
medals <- read.csv(file.path('..', 'data', 'all_medalists.csv'),
stringsAsFactors = FALSE)
library(gridExtra)
library(reshape2)
install.packages("reshape2")
library(gridExtra)
library(reshape2)
library(reshape2)
# dplyr and tidyr refresher
medal_counts <- medals %>%
group_by(Medal, Year, NOC) %>%
summarise(count = n())
head(medal_counts)
medal_counts_wide <- medal_counts %>% spread(key = Medal, value = count) %>%
ungroup() %>%
mutate(Bronze = ifelse(is.na(Bronze), 0, Bronze)) %>%
mutate(Silver = ifelse(is.na(Silver), 0, Silver)) %>%
mutate(Gold = ifelse(is.na(Gold), 0, Gold))
head(medal_counts_wide)
usa_gold_medals <-  medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA")
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
plot(usa_gold_medals$Year, usa_gold_medals$count, type = "l",
main = "USA Gold Medals",
xlab = "Year", ylab = "Count") # with updated parameters
points(x = 1984, y = usa_gold_medals$count[usa_gold_medals$Year == 1984],
col = "red", pch = 16)
plot(usa_gold_medals$Year, usa_gold_medals$count, type = "l",
main = "USA Gold Medals",
xlab = "Year", ylab = "Count") # with updated parameters
plot(medal_counts_wide$Year, medal_counts_wide$Gold) # Basic
plot(usa_gold_medals$Year, usa_gold_medals$count, type = "l",
main = "USA Gold Medals",
xlab = "Year", ylab = "Count") # with updated parameters
points(x = 1984, y = usa_gold_medals$count[usa_gold_medals$Year == 1984],
col = "red", pch = 16)
medal_lm <- lm(Gold ~ Bronze + Silver, data = medal_counts_wide)
# Calls plotting method for class of the dataset ("data.frame")
plot(medal_counts_wide %>% select(-NOC))
# Calls plotting method for class of medal_lm object ("lm"), print first two plots only
plot(medal_lm, which=1:2)
# Calls plotting method for class of the dataset ("data.frame")
plot(medal_counts_wide %>% select(-NOC))
p <- ggplot(data = medal_counts_wide, aes(x = Year, y = Gold)) +
geom_point(color = "gold")
p
p + geom_point(aes(x = Year, y = Silver), color = "gray") + ylab("Medals")
ggplot(medal_counts_wide, aes(x = Year, y = Gold)) + geom_point() +
ggtitle("Gold Medal Counts")
ggplot(usa_gold_medals, aes(x = Year, y = count)) + geom_line() +
ggtitle("USA Gold Medals")
# Histogram
ggplot(medal_counts_wide, aes(x = Gold)) + geom_histogram() +
ggtitle("Gold Medal Counts")
# Density plot
ggplot(medal_counts_wide, aes(x = Gold)) + geom_density() +
ggtitle("Gold Medal Counts")
# Bar chart
ggplot(usa_gold_medals, aes(x = Year, y = count)) + geom_bar(stat = "identity")
# This combines the subsetting and plotting into one step
medal_counts %>%
dplyr::filter(Medal == "Gold") %>%
dplyr::filter(NOC == "USA") %>%
ggplot(aes(x = Year, y = count)) + geom_line()
# ggplot2 call
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
usa_all_medals <- medal_counts %>%
dplyr::filter(NOC == "USA")
# ggplot2 call
ggplot(data = usa_all_medals, aes(x = Year, y = count)) +
geom_line(aes(color = Medal))
# Subset the data to North America countries for easier viewing
northern_hem <- medal_counts_wide %>%
dplyr::filter(NOC %in% c("USA",
"CAN", # Canada
"CUB", # Cuba
"MEX")) # Mexico
ggplot(data = northern_hem, aes(x = Year, y = Gold)) + geom_point() +
facet_wrap(~NOC) # ggplot2
data(volcano) # Load volcano contour data
volcano[1:10, 1:10] # Examine volcano dataset (first 10 rows and columns)
volcano3d <- melt(volcano) # Use reshape2 package to melt the data into tidy form
volcano3d <- melt(volcano) # Use reshape2 package to melt the data into tidy form
data_six <- air %>%
filter(Dest %in% c("ORD", "IAH")) %>%
ggplot() + aes(x = CRSDepTime, y = ArrDelay, col = dest) + geom_point(color="red")
library(codetools)
f <- function() {y <- 3; print(x + y)}
findGlobals(f)
buggyFun <- function(myDF) {
print(names(myDF))
myDF$id <- seq_len(nrow(myDF))
sums <- rowSums(myDF)
return(sums)
}
buggyFun(air)
air <- read.csv(file.path('..', 'data', 'airline.csv'), stringsAsFactors = FALSE)
buggyFun(air)
traceback()
debug(buggyFun)
buggyFun(air)
next()
debug(buggyFun)
buggyFun(air)
lr_slow <- function(y, x) {
xtx <- t(x) %*% x
xty <- t(x) %*% y
inv <- solve(xtx)   ## explicit matrix inverse is slow and generally a bad idea numerically
return(inv %*% xty)
}
lr_medium <- function(y, x) {
xtx <- crossprod(x)
xty <- crossprod(x, y)
inv <- solve(xtx)   ## explicit matrix inverse is slow and generally a bad idea numerically
return(inv %*% xty)
}
lr_fast <- function(y, x) {
xtx <- crossprod(x)
xty <- crossprod(x, y)
U <- chol(xtx)
tmp <- backsolve(U, xty, transpose = TRUE)
return(backsolve(U, tmp))
}
## generate random observations and random matrix of predictors
y <- rnorm(5000)
x <- matrix(rnorm(5000*1000), nrow = 5000)
library(proftools)
pd1 <- profileExpr(lr_slow(y, x))
x <- rnorm(1e7)
object.size(x)
1e7*8/1e6  # direct calculation of Mb
print(object.size(x), units = 'auto')
x <- rnorm(1e8)
gc()
rm(x)
gc()
air <- read.csv(file.path('..', 'data', 'airline.csv'), stringsAsFactors = FALSE)
library(methods)
sub <- air[air$Month == 1, ]  # to speed up the next steps
yb <- sub$DepDelay > 15
yc <- sub$DepDelay
yc[yc > 180] <- 180
x <- sub$Dist
mod1 <- lm(yc ~ x)
mod2 <- glm(yb ~ x, family = binomial)
predict
rboot2018 <- list(month = 'August', year = 2015,
instructor = 'Paciorek', attendance = 100)
class(rboot2018) <- "workshop"
rboot2018
mysqrt <- function(x) {
if(is.list(x)) {
warning("x is a list; converting to a vector")
x <- unlist(x)
}
if(!is.numeric(x)) {
stop("What is the square root of 'bob'?")
} else {
if(any(x < 0)) {
warning("mysqrt: found negative values; proceeding anyway")
x[x >= 0] <- (x[x >= 0])^(1/2)
x[x < 0] <- NaN
return(x)
} else return(x^(1/2))
}
}
mod <- list()
Dests <- c('LAX', 'OAK', 'DRO', 'ORD')
sub <- air[air$Dest %in% Dests, ]
sub$Month <- as.factor(sub$Month)
for(curDest in Dests) {
cat("Fitting model for destination ", curDest, ".\n")
tmp <- subset(sub, Dest == curDest)
curMod <- try(lm(DepDelay ~ Year + Month, data = tmp))
if(is(curMod, "try-error")) mod[[curDest]] <- NA
else mod[[curDest]] <- curMod
}
mod[[1]]
mod[[2]]
install.packages("RSQLite")
db <- dbConnect(SQLite(), dbname = "../data/stackoverflow-2016.db")
# note to CJP: don't run in RStudio
library(parallel)
library(doParallel)
library(foreach)
nCores <- 4  # actually only 2 on my laptop, but appears hyperthreaded
registerDoParallel(nCores)
